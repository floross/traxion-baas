// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Nestjs graphql dto generator
generator nestjsGraphqlDtos {
  provider                      = "prisma-nestjs-graphql"
  output                        = "../../../libs/nestjs/graphql-dtos/src/generated"
  purgeOutput                   = true
  reExport                      = Single
  noAtomicOperations            = true
  fields_Validator_from         = "class-validator"
  fields_Validator_input        = true
  useInputType_StringFilter_ALL = "string"

  // Remove Nested creation, update, upsert and delete
  decorate_1_type = "*Nested*Input"
  decorate_1_field = "!(connect|disconnect|set)"
  decorate_1_name = "HideField"
  decorate_1_from = "@nestjs/graphql"
  decorate_1_arguments = "[]"
}

// Nestjs authorizd grahpql resolvers generator
generator authorizedGraphqlResolvers {
  provider = "trxn-prisma-nestjs-graphql-resolvers-casl-generator"
  output = "../../../libs/nestjs/resolvers/src/generated"

  // Path relative to the output directory
  tsConfigFilePath = "../../../libs/nestjs/resolvers/tsconfig.json"
  nestjsServicesImportPath = "@traxion/nestjs-services"
  nestjsGraphqlDtosImportPath = "@traxion/nestjs-graphql-dtos"
  caslImportPath = "@traxion/common-casl"
}

// // Nestjs common services generator
generator nestjsServices {
  provider = "trxn-prisma-nestjs-services-generator"
  output   = "../../../libs/nestjs/services/src/generated"
  tsConfigFilePath   = "../../../nestjs/services/tsconfig.json"
}

generator caslConfig {
  provider = "trxn-hapify-prisma-casl-generator"
  output   = "../../../libs/casl/src/generated"
  tsConfigFilePath   = "../../../libs/casl/tsconfig.json"
}

//--------------------------------------------
// This part describe the project models
//--------------------------------------------
model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int
}

/// @trxn/permission:readOnly
model Role {
  id     Int    @id @default(autoincrement())
  name    String
  users User[]
  rights Right[]
}


/// @trxn/ownership:ignore
model Right {
  id     Int    @id @default(autoincrement())
  name    String @unique
  roles Role[]
}

//--------------------------------------------
// Uncomment the next bloc to add the Tag model
//--------------------------------------------
// model Tag {
//   id     Int    @id @default(autoincrement())
//   name    String @unique
//   description String?
// }
